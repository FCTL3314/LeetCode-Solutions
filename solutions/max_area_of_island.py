# Problem: 695. Max Area of Island


def max_area_of_island(grid):
    rows, cols = len(grid), len(grid[0])
    path = set()

    def dfs(r, c):
        if r < 0 or c < 0 or r == rows or c == cols or (r, c) in path or grid[r][c] == 0:
            return 0
        path.add((r, c))
        return (1 + dfs(r + 1, c) +
                dfs(r - 1, c) +
                dfs(r, c - 1) +
                dfs(r, c + 1))

    area = 0

    for r in range(rows):
        for c in range(cols):
            area = max(area, dfs(r, c))

    return area


answer = max_area_of_island(
    grid=[[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
          [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
          [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]]
)
print(answer)

"""
Первым делом, в 5-й строке мы получаем количество строк (rows) и столбцов (cols) списка. В 6-й строке мы создаем 
множество, чтобы избежать проверки уже проверенных элементов списка. Далее, самое главное - функция dfs. Эта функция 
будет вызываться на каждой итерации цикла в 21-й строке, получая значение строки и столбца. В 9-й строке происходит 
проверка на то, является ли клетка нулем и была ли она в множестве path, а также не выходит ли она за рамки списка. 
Затем в 12-й строке (вызываемой только если клетка была клеткой острова), мы вызываем функции dfs, которые вернут 
значение граничащих островов в виде числа, добавляя 1 за каждый остров. В итоге мы получаем значение, которое 
записывается в переменную area, если оно больше предыдущего значения. Таким образом, два цикла пройдут нас по всему 
массиву, и в результате мы получим максимальную площадь.
"""
